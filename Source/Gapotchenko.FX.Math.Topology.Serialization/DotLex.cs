//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  GPLEX input file <Dot.lex - 26.11.2021 21:20:11>
//  GPLEX frame file <DOTLEXFRAME.CS>
//
//  Option settings: parser, minimize
//  Option settings: compressNext, persistBuffer, embedbuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

using Gapotchenko.FX.Math.Topology.Serialization.ParserToolkit;

namespace Gapotchenko.FX.Math.Topology.Serialization
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
     internal sealed partial class DotScanner : ScanBase
    {
        ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer => buffer;
        
        static int GetMaxParseToken() {
            var maxParseToken = typeof(DotTokens).GetField("maxParseToken")?.GetValue(null);
            return maxParseToken == null ? int.MaxValue : (int)maxParseToken;
        }
        
        static int parserMax = GetMaxParseToken();

        const int maxAccept = 44;
        const int initial = 45;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int STRING = 1;
        const int HTML = 2;
        const int LINECOMMENT = 3;
        const int MLINECOMMENT = 4;

#region user code
int nesting = 0;
	string? stringId = null;
  
    internal void LoadYylVal() {
        int dummy = yytext.Length;
        yylval.sVal = tokTxt;
    }
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the LLoc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string? tokTxt;     // lazily constructed text of token

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public sbyte[]? nxt;
        public Table(int m, int x, int d, sbyte[]? n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {45, 30, 48, 49, 50, 0};

    static Table[] NxS = new Table[51] {
/* NxS[   0] */ new Table(0, 0, 0, null),
/* NxS[   1] */ new Table(0, 0, -1, null),
/* NxS[   2] */ new Table(0, 0, -1, null),
/* NxS[   3] */ new Table(35, 1, -1, new sbyte[] {29}),
/* NxS[   4] */ new Table(0, 128, 4, new sbyte[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 
          -1, 4, -1, -1, 20, -1, -1, 46, 4, -1, 4, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, -1, -1, -1, -1, -1, 4, -1, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, -1, -1, -1, -1, 4, -1, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, -1, -1, -1, -1, -1}),
/* NxS[   5] */ new Table(0, 0, -1, null),
/* NxS[   6] */ new Table(0, 0, -1, null),
/* NxS[   7] */ new Table(0, 0, -1, null),
/* NxS[   8] */ new Table(0, 0, -1, null),
/* NxS[   9] */ new Table(45, 18, -1, new sbyte[] {25, 47, -1, 26, 26, 26, 
          26, 26, 26, 26, 26, 26, 26, -1, -1, -1, -1, 27}),
/* NxS[  10] */ new Table(42, 6, -1, new sbyte[] {23, -1, -1, -1, -1, 24}),
/* NxS[  11] */ new Table(0, 0, -1, null),
/* NxS[  12] */ new Table(0, 0, -1, null),
/* NxS[  13] */ new Table(0, 0, -1, null),
/* NxS[  14] */ new Table(0, 0, -1, null),
/* NxS[  15] */ new Table(0, 0, -1, null),
/* NxS[  16] */ new Table(0, 0, -1, null),
/* NxS[  17] */ new Table(0, 0, -1, null),
/* NxS[  18] */ new Table(0, 0, -1, null),
/* NxS[  19] */ new Table(0, 0, -1, null),
/* NxS[  20] */ new Table(0, 128, 20, new sbyte[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 
          -1, 20, -1, -1, 20, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, -1, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
          20, 20, 20, 20, 20, -1, -1, -1, -1, -1}),
/* NxS[  21] */ new Table(0, 128, 21, new sbyte[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, 
          -1, 21, -1, -1, 22, -1, -1, 46, 21, -1, 21, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, -1, -1, -1, -1, -1, 21, -1, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, -1, -1, -1, -1, 21, -1, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, -1, -1, -1, -1, -1}),
/* NxS[  22] */ new Table(0, 0, -1, null),
/* NxS[  23] */ new Table(0, 0, -1, null),
/* NxS[  24] */ new Table(0, 0, -1, null),
/* NxS[  25] */ new Table(0, 0, -1, null),
/* NxS[  26] */ new Table(46, 12, -1, new sbyte[] {28, -1, 26, 26, 26, 26, 
          26, 26, 26, 26, 26, 26}),
/* NxS[  27] */ new Table(0, 0, -1, null),
/* NxS[  28] */ new Table(48, 10, -1, new sbyte[] {28, 28, 28, 28, 28, 28, 
          28, 28, 28, 28}),
/* NxS[  29] */ new Table(0, 0, -1, null),
/* NxS[  30] */ new Table(10, 83, 31, new sbyte[] {-1, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33}),
/* NxS[  31] */ new Table(10, 83, 31, new sbyte[] {-1, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, -1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33}),
/* NxS[  32] */ new Table(0, 0, -1, null),
/* NxS[  33] */ new Table(10, 83, 31, new sbyte[] {34, 31, 31, 35, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 36, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33}),
/* NxS[  34] */ new Table(0, 0, -1, null),
/* NxS[  35] */ new Table(10, 83, 31, new sbyte[] {34, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, -1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33}),
/* NxS[  36] */ new Table(0, 0, -1, null),
/* NxS[  37] */ new Table(0, 0, -1, null),
/* NxS[  38] */ new Table(0, 0, -1, null),
/* NxS[  39] */ new Table(0, 0, -1, null),
/* NxS[  40] */ new Table(0, 0, -1, null),
/* NxS[  41] */ new Table(0, 0, -1, null),
/* NxS[  42] */ new Table(0, 0, -1, null),
/* NxS[  43] */ new Table(47, 1, -1, new sbyte[] {44}),
/* NxS[  44] */ new Table(0, 0, -1, null),
/* NxS[  45] */ new Table(0, 128, 4, new sbyte[] {1, 1, 1, 1, 1, 1, 
          1, 1, 1, 2, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 1, 1, 1, 
          1, 4, 6, 7, 4, 1, 8, 9, 4, 10, 4, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 11, 12, 13, 14, 1, 4, 15, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, 16, 1, 17, 1, 4, 1, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
          4, 4, 4, 4, 4, 18, 1, 19, 1, 1}),
/* NxS[  46] */ new Table(0, 128, 21, new sbyte[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, 
          -1, 21, -1, -1, 22, -1, -1, 46, 21, -1, 21, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, -1, -1, -1, -1, -1, 21, -1, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, -1, -1, -1, -1, 21, -1, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 21, -1, -1, -1, -1, -1}),
/* NxS[  47] */ new Table(48, 10, -1, new sbyte[] {28, 28, 28, 28, 28, 28, 
          28, 28, 28, 28}),
/* NxS[  48] */ new Table(10, 53, 37, new sbyte[] {-1, 37, 37, 37, 37, 37, 
          37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 
          37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 
          37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 37, 39}),
/* NxS[  49] */ new Table(10, 1, 40, new sbyte[] {41}),
/* NxS[  50] */ new Table(10, 33, 42, new sbyte[] {-1, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
          42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt![idx];
            return rslt;
        }
}

#endregion

        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        Context ctx = new Context();

        // =================== End Nested classes =======================

     internal DotScanner(TextReader reader)
        {
            this.buffer = ScanBuff.GetBuffer(reader);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }

            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
                cCol++;
            }
        }

        void MarkToken()
        {
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }
        
        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
                    return tokEPos - tokPos;
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
            try {
                for (; ; )
                {
                    int next;              // next state to enter
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)DotTokens.EOF;
            break;
        case 1:
        case 9:
        case 10:
Error(yytext);
            break;
        case 2:
        case 3:
{}
            break;
        case 4:
        case 20:
return (int) MkId(yytext);
            break;
        case 5:
BEGIN(STRING); stringId = "";
            break;
        case 6:
return (int)'(';
            break;
        case 7:
return (int)')';
            break;
        case 8:
return (int)',';
            break;
        case 11:
return (int)':';
            break;
        case 12:
return (int)';';
            break;
        case 13:
BEGIN(HTML); nesting = 1;
            break;
        case 14:
return (int)'=';
            break;
        case 15:
return (int)'@';
            break;
        case 16:
return (int)'[';
            break;
        case 17:
return (int)']';
            break;
        case 18:
return (int)'{';
            break;
        case 19:
return (int)'}';
            break;
        case 21:
        case 22:
return (int) MkId(yytext);
            break;
        case 23:
BEGIN(MLINECOMMENT);
            break;
        case 24:
BEGIN(LINECOMMENT);
            break;
        case 25:
return (int) DotTokens.ARROW;
            break;
        case 26:
        case 28:
return (int) DotTokens.ID;
            break;
        case 27:
return (int) DotTokens.ARROW;
            break;
        case 29:
BEGIN(LINECOMMENT);
            break;
        case 30:
        case 31:
        case 33:
        case 35:
stringId += yytext;
            break;
        case 32:
BEGIN(INITIAL); tokTxt = stringId; return (int)DotTokens.ID;
            break;
        case 34:
stringId += yytext; stringId = TrimString(stringId);
            break;
        case 36:
stringId += yytext;
            break;
        case 37:
{ }
            break;
        case 38:
nesting++;
            break;
        case 39:
nesting--; if (nesting == 0) { BEGIN(INITIAL); return (int)DotTokens.ID; }
            break;
        case 40:
{}
            break;
        case 41:
BEGIN(INITIAL);
            break;
        case 42:
        case 43:
{}
            break;
        case 44:
BEGIN(INITIAL);
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
            } // end try
            finally {
// User-specified epilog to scan()
LoadYylVal();
// End, user-specified epilog
            } // end finally
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }


        // ============= End of the tokenizer code ================

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

string message = "";

    public int Line { get { return yyline; }}
    public int Col  { get { return yycol; }}
    public string Message { get { return message; }}

    public override void yyerror(string format, params object[] args)
    {	  
        if (args.Length > 0) 
 	    message = String.Format(format, args);
        else
	    message = format;
    }

    public void Error(string txt) {
       if (txt != null) {
           message = String.Format("Unexpected {0}",txt);
       }
    }

    public static DotTokens MkId(string txt) {
       switch (txt.ToLower()) {
       case "graph":    return DotTokens.GRAPH;
       case "digraph":  return DotTokens.DIGRAPH;
       case "subgraph": return DotTokens.SUBGRAPH;
       case "node":     return DotTokens.NODE;
       case "edge":     return DotTokens.EDGE;
       default:         return DotTokens.ID;
       }       
    }

	static string TrimString(string stringId) {
        if (stringId.EndsWith("\\\r\n"))
            stringId = stringId.Substring(0, stringId.Length - 3);
        else if (stringId.EndsWith("\\\n"))
            stringId = stringId.Substring(0, stringId.Length - 2);
        return stringId;
	}

#endregion
        } // end class DotScanner
} // end namespace
