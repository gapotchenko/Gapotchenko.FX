<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- NuGet Specification -->
  <PropertyGroup>
    <Version>2020.1.3-beta</Version>
    <Authors>Gapotchenko</Authors>
    <PackageTags>framework platform polyfill rad</PackageTags>
    <PackageIcon>PackageIcon.png</PackageIcon>
    <PackageProjectUrl>https://gapotchenko.com/fx</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <RepositoryUrl>https://github.com/gapotchenko/Gapotchenko.FX</RepositoryUrl>
    <IsPackable>$(IsPublicProject)</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)Resources\PackageIcon.png" Pack="true" PackagePath="" Visible="false" />
  </ItemGroup>

  <!-- =================================================================== -->

  <PropertyGroup>
    <PackageOutputPath>bin\$(Configuration)\nuget</PackageOutputPath>
    <GenerateNuspecDependsOn>PrepareNuspec;$(GenerateNuspecDependsOn)</GenerateNuspecDependsOn>
  </PropertyGroup>

  <!-- =================================================================== -->

  <!-- Workaround for https://github.com/NuGet/Home/issues/7001 -->
  <Target Name="DisableNuGetDeterministicPackaging"
          BeforeTargets="GenerateNuspec"
          AfterTargets="CoreCompile">
    <PropertyGroup>
      <Deterministic>false</Deterministic>
    </PropertyGroup>
  </Target>

  <!-- =================================================================== -->

  <Target Name="PrepareNuspec">
    <NLP_GeneratePackageRepositoryUrl
        ProjectDirectory="$(MSBuildProjectDirectory)"
        SolutionDirectory="$(SolutionDir)"
        RepositoryUrl="$(RepositoryUrl)"
	PackageVersion="$(Version)">
      <Output PropertyName="RepositoryUrl" TaskParameter="RepositoryUrl" />
    </NLP_GeneratePackageRepositoryUrl>

    <NLP_GeneratePackageSpecification
        PackageId="$(PackageId)"
        CommonlyUsedParts="@(CommonlyUsedPart)"
        TargetFrameworks="$(TargetFrameworks)">
      <Output PropertyName="PackageDescription" TaskParameter="Description" />
    </NLP_GeneratePackageSpecification>

    <PropertyGroup>
      <PackageTags>$(PackageTags) @(PackageTag)</PackageTags>
    </PropertyGroup>
  </Target>

  <!-- =================================================================== -->
  <!-- NLP (Natural Language Processing) -->
  <!-- =================================================================== -->

  <UsingTask
    TaskName="NLP_GeneratePackageSpecification"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">

    <ParameterGroup>
      <PackageId ParameterType="System.String" Required="true" />
      <CommonlyUsedParts ParameterType="System.String[]" />
      <TargetFrameworks ParameterType="System.String" Required="true" />

      <Description ParameterType="System.String" Output="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Collections.Generic" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
var tw = new StringWriter();

// --- Summary ---

tw.WriteLine(".NET polyfill to the future. A versatile RAD (Rapid Application Development) framework for .NET platform.");

tw.WriteLine();
tw.WriteLine("Gapotchenko.FX closes the gaps in original .NET design by providing the long-missing functionality that should have been mainstream since 2012.");

bool isProfile = false;

string moduleLiteral = PackageId;
if (moduleLiteral == "Gapotchenko.FX")
{
    moduleLiteral = "the main module";
}
else
{
    const string profilePrefix = "Gapotchenko.FX.Profiles.";
    if (moduleLiteral.StartsWith(profilePrefix))
    {
        isProfile = true;
        moduleLiteral = moduleLiteral.Substring(profilePrefix.Length);
        moduleLiteral = "the " + moduleLiteral + " profile";
    }
    else
    {
        moduleLiteral += " module";
    }
}

tw.WriteLine();
tw.WriteLine("This package represents {0} of Gapotchenko.FX.", moduleLiteral);

if (isProfile)
{
    tw.WriteLine();
    tw.WriteLine("Hint: instead of referencing each individual Gapotchenko.FX module, you can opt-in into referencing a profile.");
}

// --- Commonly Used Parts ---

if (CommonlyUsedParts != null && CommonlyUsedParts.Length != 0)
{
    tw.WriteLine();
    if (isProfile)
        tw.WriteLine("Commonly Used Modules:");
    else
        tw.WriteLine("Commonly Used Types:");

    foreach (var part in CommonlyUsedParts)
    {
        tw.Write("- ");
        tw.WriteLine(part);
    }
}

// --- Supported Platforms ---

var supportedPlatforms = new List<string>();

var targetFrameworks = new HashSet<string>(TargetFrameworks.Split(';'), StringComparer.OrdinalIgnoreCase);

bool containsNETStandard20 = targetFrameworks.Contains("netstandard2.0");
if (containsNETStandard20)
    supportedPlatforms.Add(".NET Standard 2.0+");

if (targetFrameworks.Contains("net45"))
    supportedPlatforms.Add(".NET Framework 4.5+");

if (targetFrameworks.Contains("netcoreapp2.0") || containsNETStandard20)
    supportedPlatforms.Add(".NET Core 2.0+");

if (supportedPlatforms.Count != 0)
{
    tw.WriteLine();
    tw.WriteLine("Supported Platforms:");
    foreach (var i in supportedPlatforms)
    {
        tw.Write("- ");
        tw.WriteLine(i);
    }
}

Description = tw.ToString().TrimEnd();
        ]]>
      </Code>
    </Task>

  </UsingTask>

  <!-- =================================================================== -->

  <UsingTask
    TaskName="NLP_GeneratePackageRepositoryUrl"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">

    <ParameterGroup>
      <ProjectDirectory ParameterType="System.String" Required="true" />
      <SolutionDirectory ParameterType="System.String" Required="true" />
      <RepositoryUrl ParameterType="System.String" Required="true" Output="true" />
      <PackageVersion ParameterType="System.String" Required="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
string MakeRelativePath(string path, string basePath)
{
    if (path == null)
        throw new ArgumentNullException(nameof(path));
    if (basePath == null)
        throw new ArgumentNullException(nameof(basePath));

    // Require trailing backslash for path.
    if (!basePath.EndsWith("\\"))
        basePath += "\\";

    var baseUri = new Uri(basePath);
    var fullUri = new Uri(path);

    var relativeUri = baseUri.MakeRelativeUri(fullUri);

    if (relativeUri.IsAbsoluteUri)
    {
        return relativeUri.LocalPath;
    }
    else
    {
        // Uri uses forward slashes, so convert them back to file system slashes.
        return Uri.UnescapeDataString(relativeUri.ToString()).Replace('/', Path.DirectorySeparatorChar);
    }
}

bool isPreview = PackageVersion.Contains("-");

string branch = isPreview ? "new" : "master";

RepositoryUrl =
    $"{RepositoryUrl}/tree/{branch}/Source/" +
    MakeRelativePath(ProjectDirectory, SolutionDirectory).Replace(Path.DirectorySeparatorChar, '/');
        ]]>
      </Code>
    </Task>

  </UsingTask>

  <!-- =================================================================== -->

</Project>
